#!/bin/bash

reboot_pi () {
  umount "$FWLOC"
  mount / -o remount,ro
  sync
  reboot -f "$BOOT_PART_NUM"
  sleep 5
  exit 0
}

get_variables () {
  ROOT_PART_DEV=$(findmnt / -no source)
  ROOT_DEV_NAME=$(lsblk -no pkname  "$ROOT_PART_DEV")
  ROOT_DEV="/dev/${ROOT_DEV_NAME}"

  BOOT_PART_DEV=$(findmnt "$FWLOC" -no source)
  BOOT_PART_NAME=$(lsblk -no kname "$BOOT_PART_DEV")
  BOOT_DEV_NAME=$(lsblk -no pkname  "$BOOT_PART_DEV")
  BOOT_PART_NUM=$(cat "/sys/block/${BOOT_DEV_NAME}/${BOOT_PART_NAME}/partition")

  OLD_DISKID=$(fdisk -l "$ROOT_DEV" | sed -n 's/Disk identifier: 0x\([^ ]*\)/\1/p')
}

fix_partuuid() {
  if [ "$BOOT_PART_NUM" != "1" ]; then
    return 0
  fi
  mount -o remount,rw "$ROOT_PART_DEV"
  mount -o remount,rw "$BOOT_PART_DEV"
  DISKID="$(dd if=/dev/hwrng bs=4 count=1 status=none | od -An -tx4 | cut -c2-9)"
  fdisk "$ROOT_DEV" > /dev/null <<EOF
x
i
0x$DISKID
r
w
EOF
  if [ "$?" -eq 0 ]; then
    sed -i "s/${OLD_DISKID}/${DISKID}/g" /etc/fstab
    sed -i "s/${OLD_DISKID}/${DISKID}/" "$FWLOC/cmdline.txt"
    sync
  fi

  mount -o remount,ro "$ROOT_PART_DEV"
  mount -o remount,ro "$BOOT_PART_DEV"
}

regenerate_ssh_host_keys () {
  mount -o remount,rw /
  /usr/lib/raspberrypi-sys-mods/regenerate_ssh_host_keys
  RET="$?"
  mount -o remount,ro /
  return "$RET"
}

apply_custom () {
  CONFIG_FILE="$1"
  mount -o remount,rw /
  mount -o remount,rw "$FWLOC"
  if ! python3 -c "import toml" 2> /dev/null; then
    FAIL_REASON="custom.toml provided, but python3-toml is not installed\n$FAIL_REASON"
  else
    set -o pipefail
    /usr/lib/raspberrypi-sys-mods/init_config "$CONFIG_FILE" |& tee /run/firstboot.log | while read -r line; do
        MSG="$MSG\n$line"
        whiptail --infobox "$MSG" 20 60
    done
    if [ "$?" -ne 0 ]; then
      mv /run/firstboot.log /var/log/firstboot.log
      FAIL_REASON="Failed to apply customisations from custom.toml\n\nLog file saved as /var/log/firstboot.log\n$FAIL_REASON"
    fi
    set +o pipefail
  fi
  rm -f "$CONFIG_FILE"
  mount -o remount,ro "$FWLOC"
  mount -o remount,ro /
}

main () {
  get_variables

  whiptail --infobox "Generating SSH keys..." 20 60
  regenerate_ssh_host_keys

  if [ -f "$FWLOC/custom.toml" ]; then
    MSG="Applying customisations from custom.toml...\n"
    whiptail --infobox "$MSG" 20 60
    apply_custom "$FWLOC/custom.toml"
  fi

  whiptail --infobox "Fix PARTUUID..." 20 60
  fix_partuuid

  return 0
}

mountpoint -q /proc || mount -t proc proc /proc
mountpoint -q /sys || mount -t sysfs sys /sys
mountpoint -q /run || mount -t tmpfs tmp /run
mkdir -p /run/systemd

mount / -o remount,ro

if ! FWLOC=$(/usr/lib/raspberrypi-sys-mods/get_fw_loc); then
  whiptail --msgbox "Could not determine firmware partition" 20 60
  poweroff -f
fi

mount "$FWLOC" -o rw

sed -i 's| init=/usr/lib/raspberrypi-sys-mods/firstboot||' "$FWLOC/cmdline.txt"
sed -i 's| sdhci\.debug_quirks2=4||' "$FWLOC/cmdline.txt"

if ! grep -q splash "$FWLOC/cmdline.txt"; then
  sed -i "s/ quiet//g" "$FWLOC/cmdline.txt"
fi

#############################Chipsee###############################################

# Append Chipsee Packages
LOGF=$FWLOC/chipseeinit_firstrun.log
echo "Begain Chipsee init ^_^" > $LOGF

mount / -o remount,rw
mount -t configfs configfs /sys/kernel/config

# Prepare the tools 
if ! command -v i2cdetect > /dev/null; then
	if [ -d /usr/lib/arm-linux-gnueabihf ]; then
		cp /opt/chipsee/tools/i2c-armv7l/i2cdetect /usr/sbin/
		cp /opt/chipsee/tools/i2c-armv7l/libi2c.so.0 /usr/lib/arm-linux-gnueabihf/libi2c.so.0.1.1
		ln -sf /usr/lib/arm-linux-gnueabihf/libi2c.so.0.1.1 /usr/lib/arm-linux-gnueabihf/libi2c.so.0
	elif [ -d /usr/lib/aarch64-linux-gnu ]; then
		cp /opt/chipsee/tools/i2c-aarch64/i2cdetect /usr/sbin/
		cp /opt/chipsee/tools/i2c-aarch64/libi2c.so.0 /usr/lib/aarch64-linux-gnueabihf/libi2c.so.0.1.1
		ln -sf /usr/lib/aarch64-linux-gnueabihf/libi2c.so.0.1.1 /usr/lib/aarch64-linux-gnueabihf/libi2c.so.0
	fi
fi

if ! command -v bc > /dev/null; then
	if [ -d /usr/lib/arm-linux-gnueabihf ]; then
		cp /opt/chipsee/tools/bc-armv7l /usr/bin/
	elif [ -d /usr/lib/aarch64-linux-gnu ]; then
		cp /opt/chipsee/tools/bc-aarch64 /usr/bin/
	fi
fi

##enable i2c1 interface
dtparam -d $FWLOC/overlays i2c_arm=on
modprobe i2c-dev
modprobe i2c_bcm2835

KVR=`uname -r`
systemctl enable chipsee-init
depmod -a $KVR

## Board config
# Backup origin config.txt file
if [ ! -f $FWLOC/config.txt~ ]; then
        cp $FWLOC/config.txt $FWLOC/config.txt~
fi
CMVER=`cat /proc/device-tree/model | cut -d " " -f 5`
echo "SOM is CM${CMVER}" >> $LOGF
if [ "X$CMVER" = "X3" ]; then
        IS2514=`lsusb | grep -c 0424:2514`
        IS4232=`lsusb | grep -c 0403:6011`
        if [ "$IS2514" = "1" ] || [ "$IS4232" = "1" ]; then
                echo "Board is CS12800RA101" >> $LOGF
                cp $FWLOC/config-cs12800ra101.txt $FWLOC/config.txt
                echo "CS12800RA101" > /opt/chipsee/.board
        else
                echo "Board is CS10600RA070" >> $LOGF
                cp $FWLOC/config-cs10600ra070.txt $FWLOC/config.txt
                echo "CS10600RA070" > /opt/chipsee/.board
        fi
elif [ "X$CMVER" = "X4" ]; then
        ## for Chipsee CM4 products enable I2C0
        dtparam -d $FWLOC/overlays audio=off
        dtoverlay -d $FWLOC/overlays i2c0 pins_44_45=1
        raspi-gpio set 44 a1
        raspi-gpio set 45 a1
        #echo "I2C0:" >> $LOGF
        #i2cdetect -y 0 >> $LOGF
        if ! command -v i2cdetect > /dev/null; then
                cp /opt/chipsee/test/i2cdetect /usr/sbin/
                cp /opt/chipsee/test/libi2c.so.0 /usr/lib/arm-linux-gnueabihf/libi2c.so.0.1.1
                ln -sf /usr/lib/arm-linux-gnueabihf/libi2c.so.0.1.1 /usr/lib/arm-linux-gnueabihf/libi2c.so.0
        fi
        is_1a="NULL"
        is_32="NULL"
        is_20="NULL"
        ISVL805=`lspci | grep -c VL805`
        is_1a=$(i2cdetect -y  1 0x1a 0x1a | egrep "(1a|UU)" | awk '{print $2}')
        is_32=$(i2cdetct -y  0 0x32 0x32 | egrep "(32|UU)" | awk '{print $2}')
        is_20=$(i2cdetect -y  1 0x20 0x20 | egrep "(20|UU)" | awk '{print $2}')
        echo "is_1a is $is_1a" >> $LOGF
        echo "is_32 is $is_32" >> $LOGF
        echo "is_20 is $is_20" >> $LOGF
        if [ "X${is_1a}" = "X1a" -o "X${is_1a}" = "XUU" ]; then
                echo "Board is CS12800RA4101A" >> $LOGF
                cp $FWLOC/config-cs12800ra4101a.txt $FWLOC/config.txt
                echo "CS12800RA4101A" > /opt/chipsee/.board
        elif [ "X${is_32}" = "X32" -o "X${is_32}" = "XUU" ]; then
                ## for big size display
                RAWSIZE=`i2cget -y -a 0 0x51 0x0A`
                BASE16SIZE=${RAWSIZE#0x}
                BASE16SIZEUPPER=`echo ${BASE16SIZE} | tr '[:lower:]' '[:upper:]'`
                PANELSIZE=`echo "ibase=16;${BASE16SIZEUPPER}" | bc`
                echo Panel size is $PANELSIZE >> $LOGF
                case ${PANELSIZE} in
                101)
                        echo "Board is CS12800RA4101P" >> $LOGF
                        cp $FWLOC/config-cs12800ra4101p.txt $FWLOC/config.txt
                        echo "CS12800RA4101P" > /opt/chipsee/.board
                ;;
                121)
                        echo "Board is CS10768RA4121P" >> $LOGF
                        cp $FWLOC/config-cs10768ra4121p.txt $FWLOC/config.txt
                        echo "CS10768RA4121P" > /opt/chipsee/.board
                ;;
                133)
                        echo "Board is CS19108RA4133P" >> $LOGF
                        cp $FWLOC/config-cs19108ra4133p.txt $FWLOC/config.txt
                        echo "CS19108RA4133P" > /opt/chipsee/.board
                ;;
                134)
                        echo "Board is CS19108RA4133PISO" >> $LOGF
                        cp $FWLOC/config-cs19108ra4133piso.txt $FWLOC/config.txt
                        echo "CS19108RA4133PISO" > /opt/chipsee/.board
                ;;
                150)
                        echo "Board is CS10768RA4150P" >> $LOGF
                        cp $FWLOC/config-cs10768ra4150p.txt $FWLOC/config.txt
                        echo "CS10768RA4150P" > /opt/chipsee/.board
                ;;
                156)
                        echo "Board is CS19108RA4156P" >> $LOGF
                        cp $FWLOC/config-cs19108ra4156p.txt $FWLOC/config.txt
                        echo "CS19108RA4156P" > /opt/chipsee/.board
                ;;
                170)
                        echo "Board is CS12102RA4170P" >> $LOGF
                        cp $FWLOC/config-cs12102ra4170p.txt $FWLOC/config.txt
                        echo "CS12102RA4170P" > /opt/chipsee/.board
                ;;
                185)
                        echo "Board is CS19108RA4185P" >> $LOGF
                        cp $FWLOC/config-cs19108ra4185p.txt $FWLOC/config.txt
                        echo "CS19108RA4185P" > /opt/chipsee/.board
                ;;
                190)
                        echo "Board is CS12102RA4190P" >> $LOGF
                        cp $FWLOC/config-cs12102ra4190p.txt $FWLOC/config.txt
                        echo "CS12102RA4190P" > /opt/chipsee/.board
                ;;
                215)
                        echo "Board is CS19108RA4215P" >> $LOGF
                        cp $FWLOC/config-cs19108ra4215p.txt $FWLOC/config.txt
                        echo "CS19108RA4215P" > /opt/chipsee/.board
                ;;
                236)
                        echo "Board is CS19108RA4236P" >> $LOGF
                        cp $FWLOC/config-cs19108ra4236p.txt $FWLOC/config.txt
                        echo "CS19108RA4236P" > /opt/chipsee/.board
                ;;
                *)
                        echo "Board is CS12800RA4101BOX" >> $LOGF
                        cp $FWLOC/config-cs12800ra4101box.txt $FWLOC/config.txt
                        echo "CS12800RA4101BOX" > /opt/chipsee/.board
                ;;
                esac
        elif [ "X${ISVL805}" = "X1" ]; then
                echo "Board is CS10600RA4070D" >> $LOGF
                cp $FWLOC/config-cs10600ra4070d.txt $FWLOC/config.txt
                echo "CS10600RA4070D" > /opt/chipsee/.board
        elif [ "X${is_20}" = "X20" -o "X${is_20}" = "XUU" ]; then
                echo "Board is CS10600RA4070" >> $LOGF
                cp $FWLOC/config-cs10600ra4070.txt $FWLOC/config.txt
                echo "CS10600RA4070" > /opt/chipsee/.board
        else
                echo "Board is CS12720RA4050" >> $LOGF
                cp $FWLOC/config-cs12720ra4050.txt $FWLOC/config.txt
                echo "CS12720RA4050" > /opt/chipsee/.board
        fi
        # Check the WIFIBT
        modprobe -a hci_uart btbcm bnep rfcomm bluetooth
        #cat /proc/modules >> $LOGF
        hciattach /dev/ttyS0 bcm43xx 460800 noflow
        WIFIBT=`hciconfig -a | grep -c hci0`
        if [ $WIFIBT -eq 1 ]; then
               sed $FWLOC/config.txt -i -e "s/^dtoverlay=sdio/#dtoverlay=sdio/"
               sed $FWLOC/config.txt -i -e "s/^#dtparam=ant2/dtparam=ant2/"
               echo "Enabled WIFIBT" >> $LOGF
        fi
elif [ "X$CMVER" = "X5" ]; then
        RBOARD=`cspn`
        echo "Board is $RBOARD" >> $LOGF
	CFGF="config-`echo ${RBOARD} | tr '[:upper:]' '[:lower:]'`.txt"
	cp $CFGF $FWLOC/config.txt
	echo $RBOARD > /opt/chipsee/.board
fi
sync
mount / -o remount,ro
echo "Appended Chipsee init *_*" >> $LOGF
###################################################################################

mount "$FWLOC" -o remount,ro
sync

main

if [ -z "$FAIL_REASON" ]; then
  whiptail --infobox "Rebooting in 5 seconds..." 20 60
  sleep 5
else
  whiptail --msgbox "Failed running firstboot:\n${FAIL_REASON}" 20 60
fi

reboot_pi
